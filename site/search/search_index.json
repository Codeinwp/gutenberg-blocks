{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Gutenberg Blocks Blocks Registration Server-side Rendering Custom CSS & Google Fonts Template Library Adding New Templates Adding via Theme or Plugin","title":"Gutenberg Blocks"},{"location":"#gutenberg-blocks","text":"Blocks Registration Server-side Rendering Custom CSS & Google Fonts Template Library Adding New Templates Adding via Theme or Plugin","title":"Gutenberg Blocks"},{"location":"blocks/","text":"Blocks Blocks are the fundamental element of the editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor. Registration For each block, you create a new folder in the blocks directory. If the block is a structural block, like Testimonial, Service or Pricing, then you can keep them in blocks/structural folder instead. You need to have an index.js file for the block registration, and rest of the registration process is simple. You can find more info on Block API on Gutenberg Handbook . For styles, you can have two files: style.scss editor.scss Styles that are put in style.scss will only be loaded on the front-end, while editor.scss styles will only be loaded on the backend. Server-side Rendering If your block requires server-side rendering, you can extend Base_Block class in the block's folder. The file name should be class-(block-name)-block.php . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 <?php namespace ThemeIsle\\GutenbergBlocks ; /** * Class My_Custom_Block */ class My_Custom_Block extends Base_Block { /** * Constructor function for the module. * * @method __construct */ public function __construct () { parent :: __construct (); } /** * Every block needs a slug, so we need to define one and assign it to the `$this->block_slug` property * * @return mixed */ function set_block_slug () { $this -> block_slug = 'my-block' ; } /** * Set the attributes required on the server side. * * @return mixed */ function set_attributes () { $this -> attributes = array ( 'location' => array ( 'type' => 'string' , 'default' => '' , ), ); } /** * Block render function for server-side. * * This method will pe passed to the render_callback parameter and it will output * the server side output of the block. * * @return mixed|string */ function render ( $attributes ) { // Return the output } } Custom CSS & Google Fonts If your block needs to add any dynamic CSS that can't be added inline, such as pseudo-elements or media queries, you can use cycle_through_blocks method of GutenbergBlocks class. Similarly, if your block loads Google Fonts then you can use get_google_fonts method. Your Google Fonts attributes should be fontFamily and fontVariant .","title":"Blocks"},{"location":"blocks/#blocks","text":"Blocks are the fundamental element of the editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor.","title":"Blocks"},{"location":"blocks/#registration","text":"For each block, you create a new folder in the blocks directory. If the block is a structural block, like Testimonial, Service or Pricing, then you can keep them in blocks/structural folder instead. You need to have an index.js file for the block registration, and rest of the registration process is simple. You can find more info on Block API on Gutenberg Handbook . For styles, you can have two files: style.scss editor.scss Styles that are put in style.scss will only be loaded on the front-end, while editor.scss styles will only be loaded on the backend.","title":"Registration"},{"location":"blocks/#server-side-rendering","text":"If your block requires server-side rendering, you can extend Base_Block class in the block's folder. The file name should be class-(block-name)-block.php . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 <?php namespace ThemeIsle\\GutenbergBlocks ; /** * Class My_Custom_Block */ class My_Custom_Block extends Base_Block { /** * Constructor function for the module. * * @method __construct */ public function __construct () { parent :: __construct (); } /** * Every block needs a slug, so we need to define one and assign it to the `$this->block_slug` property * * @return mixed */ function set_block_slug () { $this -> block_slug = 'my-block' ; } /** * Set the attributes required on the server side. * * @return mixed */ function set_attributes () { $this -> attributes = array ( 'location' => array ( 'type' => 'string' , 'default' => '' , ), ); } /** * Block render function for server-side. * * This method will pe passed to the render_callback parameter and it will output * the server side output of the block. * * @return mixed|string */ function render ( $attributes ) { // Return the output } }","title":"Server-side Rendering"},{"location":"blocks/#custom-css-google-fonts","text":"If your block needs to add any dynamic CSS that can't be added inline, such as pseudo-elements or media queries, you can use cycle_through_blocks method of GutenbergBlocks class. Similarly, if your block loads Google Fonts then you can use get_google_fonts method. Your Google Fonts attributes should be fontFamily and fontVariant .","title":"Custom CSS &amp; Google Fonts"},{"location":"template-library/","text":"Template Library Template Library a part of Section block in which allows users to import pre-built section and page templates with one-click import. It has two Tabs: Blocks Templates Blocks contain pre-built sections, such as Pricing, Services of Header, while Templates contain full-page templates, such as a Homepage or an About page. Adding New Templates The process of adding new templates to the Template Library is reasonably straightforward. You need to create your block or page template in Gutenberg as you would typically make any layout. Make sure you test to check it is responsive and works just fine on all devices. Once your template is ready, you need to export it to JSON using Blocks Export Import plugin . Once you have your JSON file, replace links to all the images used in the layout, if any, with links to remote images. If your template is an official template then you can upload or use pre-uploaded images from: gutenberg-templates/tree/master/assets/images If the images are coming from a plugin, theme or any third-party resource, you can keep the image in your plugin/theme's assets. Take a screenshot of your section for the display. It is recommended to use your browser's development tools to take a picture of the parent node to get the best output. Once your assets are ready, you can upload them to the gutenberg-templates repository by creating a new folder. The files should be called template.json and screenshot.png . This step is for when you are making the template to be included in the core of Template Library. If you are adding it from a theme or plugin, see the next section. In the end, you can add your template to $template_list array in class-advanced-columns-server.php file. It will look something like this: name: Template Name type: Decided in which tab this template it will appear. It can be either block or template . author: Author of the template, could be name of the theme or plugin. keywords: Keywords that can be used to search. categories: Categories that can be used for sorting. template_url: Link to template's JSON file. screenshot_url: Link to screenshot of the template for preview. demo_url: Link to a webpage showing demo of the template. 1 2 3 4 5 6 7 8 9 10 11 12 13 $templates_list = array( ... array( 'title' => __( 'Example Header Block', 'textdomain' ), 'type' => 'block', 'author' => __( 'Otter', 'textdomain' ), 'keywords' => array( 'example', 'header' ), 'categories' => array( 'header' ), 'template_url' => 'template.json', 'screenshot_url' => 'screenshot.png', 'demo_url' => 'https://demo.com', ), ); Adding via Theme or Plugin Once you have generated JSON and screenshot for your template, you can hook it into Template Library using themeisle_gutenberg_templates filter, like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function plugin_add_new_templates( $templates_list ) { $templates = array( array( 'title' => __( 'Example Header Block', 'textdomain' ), 'type' => 'block', 'author' => __( 'Otter', 'textdomain' ), 'keywords' => array( 'example', 'header' ), 'categories' => array( 'header' ), 'template_url' => 'template.json', 'screenshot_url' => 'screenshot.png', 'demo_url' => 'https://demo.com', ), ); $list = array_merge( $templates_list, $templates ); return $list; } add_filter( 'themeisle_gutenberg_templates', 'plugin_add_new_templates' );","title":"Template Library"},{"location":"template-library/#template-library","text":"Template Library a part of Section block in which allows users to import pre-built section and page templates with one-click import. It has two Tabs: Blocks Templates Blocks contain pre-built sections, such as Pricing, Services of Header, while Templates contain full-page templates, such as a Homepage or an About page.","title":"Template Library"},{"location":"template-library/#adding-new-templates","text":"The process of adding new templates to the Template Library is reasonably straightforward. You need to create your block or page template in Gutenberg as you would typically make any layout. Make sure you test to check it is responsive and works just fine on all devices. Once your template is ready, you need to export it to JSON using Blocks Export Import plugin . Once you have your JSON file, replace links to all the images used in the layout, if any, with links to remote images. If your template is an official template then you can upload or use pre-uploaded images from: gutenberg-templates/tree/master/assets/images If the images are coming from a plugin, theme or any third-party resource, you can keep the image in your plugin/theme's assets. Take a screenshot of your section for the display. It is recommended to use your browser's development tools to take a picture of the parent node to get the best output. Once your assets are ready, you can upload them to the gutenberg-templates repository by creating a new folder. The files should be called template.json and screenshot.png . This step is for when you are making the template to be included in the core of Template Library. If you are adding it from a theme or plugin, see the next section. In the end, you can add your template to $template_list array in class-advanced-columns-server.php file. It will look something like this: name: Template Name type: Decided in which tab this template it will appear. It can be either block or template . author: Author of the template, could be name of the theme or plugin. keywords: Keywords that can be used to search. categories: Categories that can be used for sorting. template_url: Link to template's JSON file. screenshot_url: Link to screenshot of the template for preview. demo_url: Link to a webpage showing demo of the template. 1 2 3 4 5 6 7 8 9 10 11 12 13 $templates_list = array( ... array( 'title' => __( 'Example Header Block', 'textdomain' ), 'type' => 'block', 'author' => __( 'Otter', 'textdomain' ), 'keywords' => array( 'example', 'header' ), 'categories' => array( 'header' ), 'template_url' => 'template.json', 'screenshot_url' => 'screenshot.png', 'demo_url' => 'https://demo.com', ), );","title":"Adding New Templates"},{"location":"template-library/#adding-via-theme-or-plugin","text":"Once you have generated JSON and screenshot for your template, you can hook it into Template Library using themeisle_gutenberg_templates filter, like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 function plugin_add_new_templates( $templates_list ) { $templates = array( array( 'title' => __( 'Example Header Block', 'textdomain' ), 'type' => 'block', 'author' => __( 'Otter', 'textdomain' ), 'keywords' => array( 'example', 'header' ), 'categories' => array( 'header' ), 'template_url' => 'template.json', 'screenshot_url' => 'screenshot.png', 'demo_url' => 'https://demo.com', ), ); $list = array_merge( $templates_list, $templates ); return $list; } add_filter( 'themeisle_gutenberg_templates', 'plugin_add_new_templates' );","title":"Adding via Theme or Plugin"}]}